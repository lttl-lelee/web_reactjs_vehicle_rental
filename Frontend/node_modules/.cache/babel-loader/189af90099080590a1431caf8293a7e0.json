{"ast":null,"code":"import { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\nimport { StorageKeys } from \"../../constants/index\";\nimport authAPI from \"../../services/authAPI\";\nexport const register = createAsyncThunk(\"auth/register\", async payload => {\n  // Gọi API đăng ký\n  const response = await authAPI.register(payload); // Lưu data xuống Local Storage\n\n  localStorage.setItem(StorageKeys.TOKEN, response.data.access_token);\n  localStorage.setItem(StorageKeys.USER, JSON.stringify(response.data)); // lưu data > user xuống localStorage với key là user\n  // return user data\n\n  return response.data;\n});\nexport const login = createAsyncThunk(\"auth/login\", async (payload, {\n  rejectWithValue\n}) => {\n  try {\n    // Gọi API đăng nhập\n    const response = await authAPI.login(payload);\n    console.log(response); // Lưu data xuống Local Storage\n\n    localStorage.setItem(StorageKeys.TOKEN, response.data.access_token);\n    localStorage.setItem(StorageKeys.USER, JSON.stringify(response.data)); // lưu data > user xuống localStorage với key là user\n    // return user data\n\n    return response.data;\n  } catch (error) {\n    // Hàm này dùng để bắt lỗi\n    return rejectWithValue(error);\n  }\n});\n/*\r\npayload: tham số chúng ta truyền vào\r\nauth/register: line 15/ line 4\r\n*/\n\nconst authSlice = createSlice({\n  name: \"auth\",\n  initialState: {\n    // Lấy dữ liệu của user từ Local Storage gán vào Redux Sate vì mỗi lần F5 lại thì dữ liệu trên Redux State sẽ mất\n    // Nếu nhiều dữ liệu hơn thì có thể dùng Redux Persist\n    // Check như này chắc hơn là để chắc hơn\n    current: JSON.parse(localStorage.getItem(StorageKeys.USER)) || {},\n    // thông tin của user hiện tại?\n    isAuthenticated: !!localStorage.getItem(StorageKeys.USER) && !!localStorage.getItem(StorageKeys.TOKEN),\n    isLoading: false,\n    error: null // ngoài ra có thể là thông tin về quyền, vvv\n\n  },\n  reducers: {\n    logout(state) {\n      // Xóa dữ liệu trong localStorage\n      localStorage.removeItem(StorageKeys.USER);\n      localStorage.removeItem(StorageKeys.TOKEN); // Xóa ở Local Storage nhưng vẫn phải set isAuthenticated về false, nếu không thì phải F5 1 lần nữa nó mới xóa, không logic.\n\n      state.isAuthenticated = false; // Xóa dữ liệu trong Redux State\n\n      state.current = {};\n    }\n\n  },\n  // Không cần khai báo những reducer có action là async action, ví dụ như register, login, riêng logout là cần\n  // Khi Thunk thành công, sẽ cập nhật dữ liệu vào initialState (redux state)\n  extraReducers: {\n    // Đăng ký\n    [register.pending]: (state, action) => {\n      state.isAuthenticated = false;\n      state.isLoading = true;\n    },\n    [register.fulfilled]: (state, action) => {\n      state.current = action.payload; // nếu fulfilled thì cập nhật vào action.payload, action.payload là chỗ mình return trên register\n\n      state.isAuthenticated = true;\n      state.isLoading = false;\n      state.error = null; // message.success(\"Đăng ký thành công\");\n    },\n    [register.rejected]: (state, action) => {\n      state.current = null;\n      state.isAuthenticated = false;\n      state.isLoading = false;\n      state.error = action.payload; // message.error(\"Đăng ký thất bại\");\n    },\n    // Đăng nhập\n    [login.pending]: (state, action) => {\n      state.isAuthenticated = false;\n      state.isLoading = true;\n    },\n    [login.fulfilled]: (state, action) => {\n      state.current = action.payload; // nếu fulfilled thì cập nhật vào action.payload, action.payload là chỗ mình return trên register\n\n      state.isAuthenticated = true;\n      state.isLoading = false;\n      state.error = null; // message.success(\"Đăng nhập thành công\");\n    },\n    [login.rejected]: (state, action) => {\n      state.current = null;\n      state.isAuthenticated = false;\n      state.isLoading = false;\n      state.error = action.payload; // message.error(\"Đăng nhập thất bại\");\n      // console.log(\"Bắt lỗi từ Redux: \", action.payload);\n    }\n  }\n});\nconst {\n  actions,\n  reducer\n} = authSlice;\nexport const {\n  logout\n} = actions;\nexport default reducer;","map":{"version":3,"sources":["D:/hihi/senior-project/web/src/app/slice/authSlice.js"],"names":["createAsyncThunk","createSlice","StorageKeys","authAPI","register","payload","response","localStorage","setItem","TOKEN","data","access_token","USER","JSON","stringify","login","rejectWithValue","console","log","error","authSlice","name","initialState","current","parse","getItem","isAuthenticated","isLoading","reducers","logout","state","removeItem","extraReducers","pending","action","fulfilled","rejected","actions","reducer"],"mappings":"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","sourcesContent":["import { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\r\nimport { StorageKeys } from \"../../constants/index\";\r\nimport authAPI from \"../../services/authAPI\";\r\n\r\nexport const register = createAsyncThunk(\"auth/register\", async (payload) => {\r\n  // Gọi API đăng ký\r\n  const response = await authAPI.register(payload);\r\n  // Lưu data xuống Local Storage\r\n  localStorage.setItem(StorageKeys.TOKEN, response.data.access_token);\r\n  localStorage.setItem(StorageKeys.USER, JSON.stringify(response.data)); // lưu data > user xuống localStorage với key là user\r\n  // return user data\r\n  return response.data;\r\n});\r\n\r\nexport const login = createAsyncThunk(\r\n  \"auth/login\",\r\n  async (payload, { rejectWithValue }) => {\r\n    try {\r\n      // Gọi API đăng nhập\r\n      const response = await authAPI.login(payload);\r\n      console.log(response);\r\n      // Lưu data xuống Local Storage\r\n      localStorage.setItem(StorageKeys.TOKEN, response.data.access_token);\r\n      localStorage.setItem(StorageKeys.USER, JSON.stringify(response.data)); // lưu data > user xuống localStorage với key là user\r\n      // return user data\r\n      return response.data;\r\n    } catch (error) {\r\n      // Hàm này dùng để bắt lỗi\r\n      return rejectWithValue(error);\r\n    }\r\n  }\r\n);\r\n\r\n/*\r\npayload: tham số chúng ta truyền vào\r\nauth/register: line 15/ line 4\r\n*/\r\n\r\nconst authSlice = createSlice({\r\n  name: \"auth\",\r\n  initialState: {\r\n    // Lấy dữ liệu của user từ Local Storage gán vào Redux Sate vì mỗi lần F5 lại thì dữ liệu trên Redux State sẽ mất\r\n    // Nếu nhiều dữ liệu hơn thì có thể dùng Redux Persist\r\n    // Check như này chắc hơn là để chắc hơn\r\n    current: JSON.parse(localStorage.getItem(StorageKeys.USER)) || {}, // thông tin của user hiện tại?\r\n    isAuthenticated:\r\n      !!localStorage.getItem(StorageKeys.USER) &&\r\n      !!localStorage.getItem(StorageKeys.TOKEN),\r\n    isLoading: false,\r\n    error: null, // ngoài ra có thể là thông tin về quyền, vvv\r\n  },\r\n  reducers: {\r\n    logout(state) {\r\n      // Xóa dữ liệu trong localStorage\r\n      localStorage.removeItem(StorageKeys.USER);\r\n      localStorage.removeItem(StorageKeys.TOKEN);\r\n      // Xóa ở Local Storage nhưng vẫn phải set isAuthenticated về false, nếu không thì phải F5 1 lần nữa nó mới xóa, không logic.\r\n      state.isAuthenticated = false;\r\n      // Xóa dữ liệu trong Redux State\r\n      state.current = {};\r\n    },\r\n  }, // Không cần khai báo những reducer có action là async action, ví dụ như register, login, riêng logout là cần\r\n  // Khi Thunk thành công, sẽ cập nhật dữ liệu vào initialState (redux state)\r\n  extraReducers: {\r\n    // Đăng ký\r\n    [register.pending]: (state, action) => {\r\n      state.isAuthenticated = false;\r\n      state.isLoading = true;\r\n    },\r\n    [register.fulfilled]: (state, action) => {\r\n      state.current = action.payload; // nếu fulfilled thì cập nhật vào action.payload, action.payload là chỗ mình return trên register\r\n      state.isAuthenticated = true;\r\n      state.isLoading = false;\r\n      state.error = null;\r\n      // message.success(\"Đăng ký thành công\");\r\n    },\r\n    [register.rejected]: (state, action) => {\r\n      state.current = null;\r\n      state.isAuthenticated = false;\r\n      state.isLoading = false;\r\n      state.error = action.payload;\r\n      // message.error(\"Đăng ký thất bại\");\r\n    },\r\n    // Đăng nhập\r\n    [login.pending]: (state, action) => {\r\n      state.isAuthenticated = false;\r\n      state.isLoading = true;\r\n    },\r\n    [login.fulfilled]: (state, action) => {\r\n      state.current = action.payload; // nếu fulfilled thì cập nhật vào action.payload, action.payload là chỗ mình return trên register\r\n      state.isAuthenticated = true;\r\n      state.isLoading = false;\r\n      state.error = null;\r\n      // message.success(\"Đăng nhập thành công\");\r\n    },\r\n    [login.rejected]: (state, action) => {\r\n      state.current = null;\r\n      state.isAuthenticated = false;\r\n      state.isLoading = false;\r\n      state.error = action.payload;\r\n      // message.error(\"Đăng nhập thất bại\");\r\n      // console.log(\"Bắt lỗi từ Redux: \", action.payload);\r\n    },\r\n  },\r\n});\r\n\r\nconst { actions, reducer } = authSlice;\r\nexport const { logout } = actions;\r\nexport default reducer;\r\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"var _jsxFileName = \"D:\\\\hihi\\\\senior-project\\\\web\\\\src\\\\components\\\\homepage\\\\AutoComplete\\\\AutoComplete.jsx\",\n    _s = $RefreshSig$();\n\n// @ts-nocheck\nimport React from \"react\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Autocomplete from \"@material-ui/lab/Autocomplete\";\nimport LocationOnIcon from \"@material-ui/icons/LocationOn\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Typography from \"@material-ui/core/Typography\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport parse from \"autosuggest-highlight/parse\";\nimport throttle from \"lodash/throttle\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction loadScript(src, position, id) {\n  if (!position) {\n    return;\n  }\n\n  const script = document.createElement(\"script\");\n  script.setAttribute(\"async\", \"\");\n  script.setAttribute(\"id\", id);\n  script.src = src;\n  position.appendChild(script);\n}\n\nconst autocompleteService = {\n  current: null\n};\nconst useStyles = makeStyles(theme => ({\n  icon: {\n    color: theme.palette.text.secondary,\n    marginRight: theme.spacing(2)\n  }\n}));\nexport default function GoogleMaps(props) {\n  _s();\n\n  const classes = useStyles();\n  const [value, setValue] = React.useState(null);\n  const [inputValue, setInputValue] = React.useState(\"\");\n  const [options, setOptions] = React.useState([]);\n  const loaded = React.useRef(false);\n\n  const GGAPI = async () => {\n    if (typeof window !== 'undefined' && !loaded.current) {\n      // if (!document.querySelector('#google-maps')) {\n      //     loadScript(\n      //         'https://maps.googleapis.com/maps/api/js?key=AIzaSyANo5lGD3FH8oiGfqqaVw_tRRyw-qoGCT8&libraries=places',\n      //         document.querySelector('head'),\n      //         'google-maps',\n      //     );\n      // }\n      loaded.current = true;\n    }\n  };\n\n  const fetch = React.useMemo(() => throttle((request, callback) => {\n    autocompleteService.current.getPlacePredictions(request, callback);\n  }, 200), []);\n  React.useEffect(() => {\n    GGAPI();\n    let active = true;\n\n    if (!autocompleteService.current && window.google) {\n      autocompleteService.current = new window.google.maps.places.AutocompleteService();\n    }\n\n    if (!autocompleteService.current) {\n      return undefined;\n    }\n\n    if (inputValue === \"\") {\n      setOptions(value ? [value] : []);\n      return undefined;\n    }\n\n    fetch({\n      input: inputValue\n    }, results => {\n      if (active) {\n        let newOptions = [];\n\n        if (value) {\n          newOptions = [value];\n        }\n\n        if (results) {\n          newOptions = [...newOptions, ...results];\n        }\n\n        setOptions(newOptions);\n      }\n    });\n    return () => {\n      active = false;\n    };\n  }, [value, inputValue, fetch]);\n  return /*#__PURE__*/_jsxDEV(Autocomplete, {\n    id: \"google-map-demo\",\n    size: \"small\",\n    getOptionLabel: option => typeof option === \"string\" ? option : option.description,\n    filterOptions: x => x,\n    options: options,\n    autoComplete: true,\n    includeInputInList: true,\n    filterSelectedOptions: true,\n    value: value,\n    onChange: (event, newValue) => {\n      if (newValue) {\n        setOptions([newValue, ...options]);\n        setValue(newValue.description);\n        props.getLocal(newValue.description);\n      }\n    },\n    onInputChange: (event, newInputValue) => {\n      setInputValue(newInputValue);\n    },\n    renderInput: params => /*#__PURE__*/_jsxDEV(TextField, { ...params,\n      variant: \"filled\",\n      fullWidth: true,\n      placeholder: \"Nh\\u1EADp \\u0111\\u1ECBa \\u0111i\\u1EC3m b\\u1EA1n mu\\u1ED1n t\\xECm ki\\u1EBFm \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 9\n    }, this),\n    renderOption: option => {\n      const matches = option.structured_formatting.main_text_matched_substrings;\n      const parts = parse(option.structured_formatting.main_text, matches.map(match => [match.offset, match.offset + match.length]));\n      return /*#__PURE__*/_jsxDEV(Grid, {\n        container: true,\n        alignItems: \"center\",\n        children: [/*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          children: /*#__PURE__*/_jsxDEV(LocationOnIcon, {\n            className: classes.icon\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 127,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 126,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          xs: true,\n          children: [parts.map((part, index) => /*#__PURE__*/_jsxDEV(\"span\", {\n            style: {\n              fontWeight: part.highlight ? 700 : 400\n            },\n            children: part.text\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 131,\n            columnNumber: 17\n          }, this)), /*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"body2\",\n            color: \"textSecondary\",\n            children: option.structured_formatting.secondary_text\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 138,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 129,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 11\n      }, this);\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 87,\n    columnNumber: 5\n  }, this);\n}\n\n_s(GoogleMaps, \"iMnl1YDxiIYnTAhmi3U2CxLO7FE=\", false, function () {\n  return [useStyles];\n});\n\n_c = GoogleMaps;\n\nvar _c;\n\n$RefreshReg$(_c, \"GoogleMaps\");","map":{"version":3,"sources":["D:/hihi/senior-project/web/src/components/homepage/AutoComplete/AutoComplete.jsx"],"names":["React","TextField","Autocomplete","LocationOnIcon","Grid","Typography","makeStyles","parse","throttle","loadScript","src","position","id","script","document","createElement","setAttribute","appendChild","autocompleteService","current","useStyles","theme","icon","color","palette","text","secondary","marginRight","spacing","GoogleMaps","props","classes","value","setValue","useState","inputValue","setInputValue","options","setOptions","loaded","useRef","GGAPI","window","fetch","useMemo","request","callback","getPlacePredictions","useEffect","active","google","maps","places","AutocompleteService","undefined","input","results","newOptions","option","description","x","event","newValue","getLocal","newInputValue","params","matches","structured_formatting","main_text_matched_substrings","parts","main_text","map","match","offset","length","part","index","fontWeight","highlight","secondary_text"],"mappings":"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","sourcesContent":["// @ts-nocheck\r\nimport React from \"react\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport Autocomplete from \"@material-ui/lab/Autocomplete\";\r\nimport LocationOnIcon from \"@material-ui/icons/LocationOn\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport parse from \"autosuggest-highlight/parse\";\r\nimport throttle from \"lodash/throttle\";\r\nfunction loadScript(src, position, id) {\r\n  if (!position) {\r\n    return;\r\n  }\r\n  const script = document.createElement(\"script\");\r\n  script.setAttribute(\"async\", \"\");\r\n  script.setAttribute(\"id\", id);\r\n  script.src = src;\r\n  position.appendChild(script);\r\n}\r\nconst autocompleteService = { current: null };\r\nconst useStyles = makeStyles((theme) => ({\r\n  icon: {\r\n    color: theme.palette.text.secondary,\r\n    marginRight: theme.spacing(2),\r\n  },\r\n}));\r\nexport default function GoogleMaps(props) {\r\n  const classes = useStyles();\r\n  const [value, setValue] = React.useState(null);\r\n  const [inputValue, setInputValue] = React.useState(\"\");\r\n  const [options, setOptions] = React.useState([]);\r\n  const loaded = React.useRef(false);\r\n  const GGAPI = async () => {\r\n    if (typeof window !== 'undefined' && !loaded.current) {\r\n      // if (!document.querySelector('#google-maps')) {\r\n      //     loadScript(\r\n      //         'https://maps.googleapis.com/maps/api/js?key=AIzaSyANo5lGD3FH8oiGfqqaVw_tRRyw-qoGCT8&libraries=places',\r\n      //         document.querySelector('head'),\r\n      //         'google-maps',\r\n      //     );\r\n      // }\r\n      loaded.current = true;\r\n  }\r\n  }\r\n  \r\n  const fetch = React.useMemo(\r\n    () =>\r\n      throttle((request, callback) => {\r\n        \r\n        autocompleteService.current.getPlacePredictions(request, callback);\r\n      }, 200),\r\n    []\r\n  );\r\n  React.useEffect(() => {\r\n    GGAPI();\r\n    let active = true;\r\n    if (!autocompleteService.current && window.google) {\r\n      autocompleteService.current =\r\n        new window.google.maps.places.AutocompleteService();\r\n    }\r\n    if (!autocompleteService.current) {\r\n      return undefined;\r\n    }\r\n    if (inputValue === \"\") {\r\n      setOptions(value ? [value] : []);\r\n      return undefined;\r\n    }\r\n    fetch({ input: inputValue }, (results) => {\r\n      if (active) {\r\n        let newOptions = [];\r\n\r\n        if (value) {\r\n          newOptions = [value];\r\n        }\r\n        if (results) {\r\n          newOptions = [...newOptions, ...results];\r\n        }\r\n        setOptions(newOptions);\r\n      }\r\n    });\r\n    return () => {\r\n      active = false;\r\n    };\r\n  }, [value, inputValue, fetch]);\r\n  return (\r\n    <Autocomplete\r\n      id=\"google-map-demo\"\r\n      size=\"small\"\r\n      getOptionLabel={(option) =>\r\n        typeof option === \"string\" ? option : option.description\r\n      }\r\n      filterOptions={(x) => x}\r\n      options={options}\r\n      autoComplete\r\n      includeInputInList\r\n      filterSelectedOptions\r\n      value={value}\r\n      onChange={(event, newValue) => {\r\n        if (newValue) {\r\n          setOptions([newValue, ...options]);\r\n          setValue(newValue.description);\r\n          props.getLocal(newValue.description);\r\n        }\r\n      }}\r\n      onInputChange={(event, newInputValue) => {\r\n        setInputValue(newInputValue);\r\n      }}\r\n      renderInput={(params) => (\r\n        <TextField\r\n          {...params}\r\n          variant=\"filled\"\r\n          fullWidth\r\n          placeholder=\"Nhập địa điểm bạn muốn tìm kiếm \"\r\n        />\r\n      )}\r\n      renderOption={(option) => {\r\n        const matches =\r\n          option.structured_formatting.main_text_matched_substrings;\r\n        const parts = parse(\r\n          option.structured_formatting.main_text,\r\n          matches.map((match) => [match.offset, match.offset + match.length])\r\n        );\r\n        return (\r\n          <Grid container alignItems=\"center\">\r\n            <Grid item>\r\n              <LocationOnIcon className={classes.icon} />\r\n            </Grid>\r\n            <Grid item xs>\r\n              {parts.map((part, index) => (\r\n                <span\r\n                  key={index}\r\n                  style={{ fontWeight: part.highlight ? 700 : 400 }}\r\n                >\r\n                  {part.text}\r\n                </span>\r\n              ))}\r\n              <Typography variant=\"body2\" color=\"textSecondary\">\r\n                {option.structured_formatting.secondary_text}\r\n              </Typography>\r\n            </Grid>\r\n          </Grid>\r\n        );\r\n      }}\r\n    />\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}
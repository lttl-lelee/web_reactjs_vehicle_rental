{"ast":null,"code":"import axios from \"axios\";\nimport queryString from 'query-string';\nimport Cookie from 'universal-cookie';\nexport const getToken = () => {\n  const cookie = new Cookie();\n  const token = cookie.get('token');\n  console.log(token);\n\n  if (!token) {\n    return null;\n  }\n\n  return token.accessToken;\n}; // chỗ này chưa get dc token, Ngày mai tìm cách lấy dc token ra, rồi để ở Authorization: `Bearer ${getToken}` ở header\n\nconst axiosClient = axios.create({\n  baseURL: \"http://127.0.0.1:8000/api\",\n  headers: {\n    \"Content-Type\": \"application/json; charset=utf-8\",\n    Authorization: \"Bearer \" + \"6|eFrlPo4Mv1LfVTsueehvgKTminzD06RAoEtq95qt\"\n  },\n  paramsSerializer: params => queryString.stringify(params)\n}); // Interceptor\n// Add a request interceptor\n\naxiosClient.interceptors.request.use(function (config) {\n  // Do something before request is sent\n  return config;\n}, function (error) {\n  // Do something with request error\n  return Promise.reject(error);\n}); // Add a response interceptor\n\naxiosClient.interceptors.response.use(function (response) {\n  // Any status code that lie within the range of 2xx cause this function to trigger\n  // Do something with response data\n  return response;\n}, function (error) {\n  // Any status codes that falls outside the range of 2xx cause this function to trigger\n  // Do something with response error\n  // console.log(\"Lỗi lấy từ Axios: \", error.response);\n  const {\n    config,\n    status,\n    data\n  } = error.response;\n\n  if (config.url === \"api/login\" && status === 400) {\n    const errorMessage = data.error || {};\n    throw new Error(errorMessage);\n  }\n\n  if (config.url === \"api/login\" && status === 419) {\n    const errorMessage = data.error || {};\n    throw new Error(errorMessage);\n  }\n\n  if (config.url === \"api/register\" && status === 403) {\n    const listData = data.error || {};\n    const listError = listData.email || {};\n    const errorMessage = listError.length > 0 ? listError[0] : [];\n    throw new Error(errorMessage);\n  }\n\n  return Promise.reject(error);\n});\nexport default axiosClient;","map":{"version":3,"sources":["D:/hihi/senior-project/Frontend/src/services/axiosClient.js"],"names":["axios","queryString","Cookie","getToken","cookie","token","get","console","log","accessToken","axiosClient","create","baseURL","headers","Authorization","paramsSerializer","params","stringify","interceptors","request","use","config","error","Promise","reject","response","status","data","url","errorMessage","Error","listData","listError","email","length"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,WAAP,MAAwB,cAAxB;AACA,OAAOC,MAAP,MAAmB,kBAAnB;AACA,OAAO,MAAMC,QAAQ,GAAG,MAAM;AAC5B,QAAMC,MAAM,GAAG,IAAIF,MAAJ,EAAf;AACA,QAAMG,KAAK,GAAGD,MAAM,CAACE,GAAP,CAAW,OAAX,CAAd;AACAC,EAAAA,OAAO,CAACC,GAAR,CAAYH,KAAZ;;AACA,MAAI,CAACA,KAAL,EAAY;AACR,WAAO,IAAP;AACH;;AACD,SAAOA,KAAK,CAACI,WAAb;AACD,CARM,C,CAUP;;AACA,MAAMC,WAAW,GAAGV,KAAK,CAACW,MAAN,CAAa;AAC/BC,EAAAA,OAAO,EAAE,2BADsB;AAE/BC,EAAAA,OAAO,EAAE;AACP,oBAAgB,iCADT;AAEPC,IAAAA,aAAa,EAAE,YAAY;AAFpB,GAFsB;AAM/BC,EAAAA,gBAAgB,EAAEC,MAAM,IAAIf,WAAW,CAACgB,SAAZ,CAAsBD,MAAtB;AANG,CAAb,CAApB,C,CAQA;AACA;;AACAN,WAAW,CAACQ,YAAZ,CAAyBC,OAAzB,CAAiCC,GAAjC,CACE,UAAUC,MAAV,EAAkB;AAChB;AACA,SAAOA,MAAP;AACD,CAJH,EAKE,UAAUC,KAAV,EAAiB;AACf;AACA,SAAOC,OAAO,CAACC,MAAR,CAAeF,KAAf,CAAP;AACD,CARH,E,CAYA;;AACAZ,WAAW,CAACQ,YAAZ,CAAyBO,QAAzB,CAAkCL,GAAlC,CACE,UAAUK,QAAV,EAAoB;AAClB;AACA;AACA,SAAOA,QAAP;AACD,CALH,EAME,UAAUH,KAAV,EAAiB;AACf;AACA;AACA;AACA,QAAM;AAAED,IAAAA,MAAF;AAAUK,IAAAA,MAAV;AAAkBC,IAAAA;AAAlB,MAA2BL,KAAK,CAACG,QAAvC;;AACA,MAAIJ,MAAM,CAACO,GAAP,KAAe,WAAf,IAA8BF,MAAM,KAAK,GAA7C,EAAkD;AAChD,UAAMG,YAAY,GAAGF,IAAI,CAACL,KAAL,IAAc,EAAnC;AACA,UAAM,IAAIQ,KAAJ,CAAUD,YAAV,CAAN;AACD;;AACD,MAAIR,MAAM,CAACO,GAAP,KAAe,WAAf,IAA8BF,MAAM,KAAK,GAA7C,EAAkD;AAChD,UAAMG,YAAY,GAAGF,IAAI,CAACL,KAAL,IAAc,EAAnC;AAEA,UAAM,IAAIQ,KAAJ,CAAUD,YAAV,CAAN;AACD;;AACD,MAAIR,MAAM,CAACO,GAAP,KAAe,cAAf,IAAiCF,MAAM,KAAK,GAAhD,EAAqD;AACnD,UAAMK,QAAQ,GAAGJ,IAAI,CAACL,KAAL,IAAc,EAA/B;AACA,UAAMU,SAAS,GAAGD,QAAQ,CAACE,KAAT,IAAkB,EAApC;AACA,UAAMJ,YAAY,GAAGG,SAAS,CAACE,MAAV,GAAmB,CAAnB,GAAuBF,SAAS,CAAC,CAAD,CAAhC,GAAsC,EAA3D;AACA,UAAM,IAAIF,KAAJ,CAAUD,YAAV,CAAN;AACD;;AAED,SAAON,OAAO,CAACC,MAAR,CAAeF,KAAf,CAAP;AACD,CA5BH;AA+BA,eAAeZ,WAAf","sourcesContent":["import axios from \"axios\";\r\nimport queryString from 'query-string';\r\nimport Cookie from 'universal-cookie';\r\nexport const getToken = () => {\r\n  const cookie = new Cookie();\r\n  const token = cookie.get('token');\r\n  console.log(token);\r\n  if (!token) {\r\n      return null;\r\n  }\r\n  return token.accessToken;\r\n}\r\n\r\n// chỗ này chưa get dc token, Ngày mai tìm cách lấy dc token ra, rồi để ở Authorization: `Bearer ${getToken}` ở header\r\nconst axiosClient = axios.create({\r\n  baseURL: \"http://127.0.0.1:8000/api\",\r\n  headers: {\r\n    \"Content-Type\": \"application/json; charset=utf-8\",\r\n    Authorization: \"Bearer \" + \"6|eFrlPo4Mv1LfVTsueehvgKTminzD06RAoEtq95qt\" \r\n  },\r\n  paramsSerializer: params => queryString.stringify(params),\r\n});\r\n// Interceptor\r\n// Add a request interceptor\r\naxiosClient.interceptors.request.use(\r\n  function (config) {\r\n    // Do something before request is sent\r\n    return config;\r\n  },\r\n  function (error) {\r\n    // Do something with request error\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\n\r\n// Add a response interceptor\r\naxiosClient.interceptors.response.use(\r\n  function (response) {\r\n    // Any status code that lie within the range of 2xx cause this function to trigger\r\n    // Do something with response data\r\n    return response;\r\n  },\r\n  function (error) {\r\n    // Any status codes that falls outside the range of 2xx cause this function to trigger\r\n    // Do something with response error\r\n    // console.log(\"Lỗi lấy từ Axios: \", error.response);\r\n    const { config, status, data } = error.response;\r\n    if (config.url === \"api/login\" && status === 400) {\r\n      const errorMessage = data.error || {};\r\n      throw new Error(errorMessage);\r\n    }\r\n    if (config.url === \"api/login\" && status === 419) {\r\n      const errorMessage = data.error || {};\r\n      \r\n      throw new Error(errorMessage);\r\n    }\r\n    if (config.url === \"api/register\" && status === 403) {\r\n      const listData = data.error || {};\r\n      const listError = listData.email || {};\r\n      const errorMessage = listError.length > 0 ? listError[0] : [];\r\n      throw new Error(errorMessage);\r\n    }\r\n\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\nexport default axiosClient;\r\n"]},"metadata":{},"sourceType":"module"}